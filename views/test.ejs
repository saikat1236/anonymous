<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Call</title>
    <style>
        /* Reset margin and padding */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        /* Basic body and container setup */
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            flex-direction: column;
            padding: 20px;
        }

        h1 {
            font-size: 24px;
            margin-bottom: 20px;
            text-align: center;
        }

        /* Container for video elements */
        .video-container {
            position: relative;
            width: 100%;
            max-width: 900px;
            margin-bottom: 20px;
        }

        /* Local video styling */
        #localVideo {
            width: 100%;
            max-width: 400px;
            height: auto;
            border-radius: 8px;
        }

        /* Remote video styling */
        #remoteVideo {
            position: absolute;
            top: 10px;
            right: 10px;
            width: 30%;
            max-width: 300px;
            height: auto;
            border-radius: 8px;
        }

        /* Buttons styling */
        button {
            background-color: #4CAF50;
            color: white;
            font-size: 18px;
            padding: 12px 24px;
            border: none;
            border-radius: 50px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.3s ease;
            width: 100%;
            max-width: 200px;
            margin: 10px auto;
        }

        button:hover {
            background-color: #45a049;
            transform: scale(1.05);
        }

        /* Hide the End call button initially */
        #endCallBtn {
            display: none;
        }

        /* Media Query for mobile responsiveness */
        @media (max-width: 600px) {
            h1 {
                font-size: 20px;
            }

            .video-container {
                margin-bottom: 15px;
            }

            #localVideo {
                max-width: 100%;
                width: 100%;
            }

            #remoteVideo {
                width: 40%;
                top: 10px;
                right: 10px;
            }

            button {
                width: 100%;
                font-size: 16px;
                padding: 10px 20px;
            }
        }
    </style>
</head>
<body>
    <h1>Video Call with Stranger</h1>

    <div class="video-container">
        <video id="localVideo" autoplay playsinline muted></video>
        <video id="remoteVideo" autoplay playsinline></video>
    </div>

    <button id="startCallBtn" disabled>Start Call</button>
    <button id="endCallBtn">End Call</button>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const startCallBtn = document.getElementById('startCallBtn');
        const endCallBtn = document.getElementById('endCallBtn');
        const localVideo = document.getElementById('localVideo');
        const remoteVideo = document.getElementById('remoteVideo');

        let localStream;
        let peerConnection;
        let users = []; 

        const config = {
            iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
        };

        // Set up local video stream
        navigator.mediaDevices.getUserMedia({ video: true, audio: true })
            .then(stream => {
                localStream = stream;
                localVideo.srcObject = stream;
            })
            .catch(error => console.log(error));

        // Start call button
        startCallBtn.addEventListener('click', () => {
            if (users.length > 1) {
                startCall();
            } else {
                alert('No users available for a call');
            }
        });

        // End call button
        endCallBtn.addEventListener('click', () => {
            endCall();
        });

        // Start a new call
        function startCall() {
            peerConnection = new RTCPeerConnection(config);
            peerConnection.addEventListener('icecandidate', handleIceCandidate);
            peerConnection.addEventListener('track', handleTrack);

            localStream.getTracks().forEach(track => {
                peerConnection.addTrack(track, localStream);
            });

            peerConnection.createOffer()
                .then(offer => {
                    return peerConnection.setLocalDescription(offer);
                })
                .then(() => {
                    socket.emit('offer', peerConnection.localDescription, users[1]);
                })
                .catch(error => console.log(error));
        }

        // Handle ICE Candidate
        function handleIceCandidate(event) {
            if (event.candidate) {
                socket.emit('candidate', event.candidate, users[1]);
            }
        }

        // Handle incoming media track
        function handleTrack(event) {
            remoteVideo.srcObject = event.streams[0];
        }

        // Handle offer from another peer
        socket.on('offer', (offer, fromSocketId) => {
            peerConnection = new RTCPeerConnection(config);
            peerConnection.addEventListener('icecandidate', handleIceCandidate);
            peerConnection.addEventListener('track', handleTrack);

            localStream.getTracks().forEach(track => {
                peerConnection.addTrack(track, localStream);
            });

            peerConnection.setRemoteDescription(new RTCSessionDescription(offer))
                .then(() => peerConnection.createAnswer())
                .then(answer => {
                    return peerConnection.setLocalDescription(answer);
                })
                .then(() => {
                    socket.emit('answer', peerConnection.localDescription, fromSocketId);
                })
                .catch(error => console.log(error));
        });

        // Handle answer from another peer
        socket.on('answer', (answer) => {
            peerConnection.setRemoteDescription(new RTCSessionDescription(answer))
                .catch(error => console.log(error));
        });

        // Handle ICE Candidate from another peer
        socket.on('candidate', (candidate) => {
            peerConnection.addIceCandidate(new RTCIceCandidate(candidate))
                .catch(error => console.log(error));
        });

        // End the call
        function endCall() {
            peerConnection.close();
            peerConnection = null;
            localStream.getTracks().forEach(track => track.stop());
            localVideo.srcObject = null;
            remoteVideo.srcObject = null;
            startCallBtn.style.display = 'inline';
            endCallBtn.style.display = 'none';
        }

        // Receive the list of connected users
        socket.on('users', (userList) => {
            users = userList;  
            if (users.length > 1) {
                startCallBtn.disabled = false;  // Enable the button
            } else {
                startCallBtn.disabled = true;  // Disable the button if no other users
            }
        });
    </script>
</body>
</html>
