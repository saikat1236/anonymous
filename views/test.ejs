<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="" />
    <meta name="keywords" content="" />
    <title>unknowns</title>
    <link
      rel="icon"
      href="/images/loogo.png"
      type="/images/jpg"
      sizes="16x16"
    />
</head>
<body>
    <h1>Video Call with Strangers</h1>
    <video id="localVideo" autoplay muted playsinline></video>
    <video id="remoteVideo" autoplay playsinline></video>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();

        const localVideo = document.getElementById("localVideo");
        const remoteVideo = document.getElementById("remoteVideo");

        const peerConnectionConfig = {
            iceServers: [
                { urls: "stun:stun.l.google.com:19302" },
            ],
        };

        let localStream;
        let peerConnection;

        // Access the webcam and microphone
        async function startMedia() {
            try {
                localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
                localVideo.srcObject = localStream;
            } catch (err) {
                console.error("Error accessing media devices.", err);
            }
        }

        // Handle peer found
        socket.on("peerFound", (peerSocketId) => {
            console.log("Peer found:", peerSocketId);

            // Create a WebRTC connection
            peerConnection = new RTCPeerConnection(peerConnectionConfig);

            // Add local tracks to the connection
            localStream.getTracks().forEach((track) => {
                peerConnection.addTrack(track, localStream);
            });

            // Handle ICE candidates
            peerConnection.onicecandidate = (event) => {
                if (event.candidate) {
                    socket.emit("candidate", event.candidate, peerSocketId);
                }
            };

            // Handle remote stream
            peerConnection.ontrack = (event) => {
                remoteVideo.srcObject = event.streams[0];
            };

            // Create and send an offer
            peerConnection.createOffer().then((offer) => {
                peerConnection.setLocalDescription(offer);
                socket.emit("offer", offer, peerSocketId);
            });
        });

        // Handle incoming offer
        socket.on("offer", (offer, fromSocketId) => {
            console.log("Offer received:", fromSocketId);

            peerConnection = new RTCPeerConnection(peerConnectionConfig);

            // Add local tracks to the connection
            localStream.getTracks().forEach((track) => {
                peerConnection.addTrack(track, localStream);
            });

            // Handle ICE candidates
            peerConnection.onicecandidate = (event) => {
                if (event.candidate) {
                    socket.emit("candidate", event.candidate, fromSocketId);
                }
            };

            // Handle remote stream
            peerConnection.ontrack = (event) => {
                remoteVideo.srcObject = event.streams[0];
            };

            peerConnection.setRemoteDescription(new RTCSessionDescription(offer));

            // Create and send an answer
            peerConnection.createAnswer().then((answer) => {
                peerConnection.setLocalDescription(answer);
                socket.emit("answer", answer, fromSocketId);
            });
        });

        // Handle incoming answer
        socket.on("answer", (answer) => {
            peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
        });

        // Handle incoming ICE candidates
        socket.on("candidate", (candidate) => {
            peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
        });

        // Start media when the page loads
        window.onload = startMedia;
    </script>
</body>
</html>
